{"ID":9048,"Author":{"Name":"gzakhour","ID":0,"FullName":"","Gravatar":"08bc77bde9460b05509f0911e6377c1e"},"Title":"Demo of the LoGic Compiler","Description":"\u003cdiv class=\"content\"\u003e\u003cp\u003eThe \u003ccode\u003eLoGic Compiler\u003c/code\u003e (lgc) is a compiler for a small language I designed that evaluates logical expressions.\u003cbr/\u003e\nEach logical expression is given as a \u003ccode\u003e.lgc\u003c/code\u003e file, the compiler will output a binary that once ran will draw the\u003cbr/\u003e\ntruth table of the given logical expression.\u003c/p\u003e\n\n\u003cp\u003eThe reserved keywords are\u003cbr/\u003e\n* NOT\u003cbr/\u003e\n* AND\u003cbr/\u003e\n* OR\u003cbr/\u003e\n* NOR\u003cbr/\u003e\n* NAND\u003cbr/\u003e\n* XOR\u003c/p\u003e\n\n\u003cp\u003eAll identifiers are made of lowercase and uppercase characters. The \u003ccode\u003e(\u003c/code\u003e and \u003ccode\u003e)\u003c/code\u003e are used to define blocks\u003cbr/\u003e\nand higher precedence. The two logical conditionals \u003ccode\u003e-\u0026gt;\u003c/code\u003e and \u003ccode\u003e=\u0026gt;\u003c/code\u003e are equivalent and mean implication\u003cbr/\u003e\nand \u003ccode\u003e\u0026lt;-\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e are equivalent and mean equivalence.\u003c/p\u003e\n\n\u003cp\u003eFor example given the program \u003ccode\u003eNOT(p) OR q \u0026lt;=\u0026gt; (p -\u0026gt; q)\u003c/code\u003e the program will output\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eq        p        Output\u003cbr/\u003e\n0        0         1\u003cbr/\u003e\n0        1         1\u003cbr/\u003e\n1        0         1\u003cbr/\u003e\n1        1         1\u003c/code\u003e\u003c/p\u003e\n\u003c/div\u003e","Time":"2014-04-21T10:42:38Z","Tags":["Linux","zsh","rxvt-unicode-256color"]}